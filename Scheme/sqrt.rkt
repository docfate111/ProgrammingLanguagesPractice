#lang sicp
(define (square x) (* x x))
(define (close? guess x)
  (< (abs (- (square guess) x)) 0.001))
(define (ave x y)(/ (+ x y) 2))
(define (av x y)(/ (+ x (* 2 y)) 3))
(define (improve guess x)
  (ave guess (/ x guess)))
(define (improv guess x)
  (av guess (/ x (square guess))))
(define (sqrt-iter guess x)
(if (close? guess x)
  guess
  (sqrt-iter (improve guess x) x)))
(define (sqrt x)(sqrt-iter 1.0 x))
(define (new-if predicate then-clause else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
(define (sqrt-iter2 guess x)(new-if (close? guess x) guess (sqrt-iter (improve guess x) x)))
(define (alt_sqrt x)(sqrt-iter 1.0 x))
(define cube-root guess x)